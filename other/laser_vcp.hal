loadusr -W laser_power 95

loadusr -W ard_pressure /dev/ttyUSB0

# mr parallel port
loadrt hal_parport cfg="0xa800"
addf parport.0.write servo-thread

# load the m5i20 driver
loadrt hal_m5i20

addf m5i20.0.digital-in-read servo-thread
addf m5i20.0.digital-out-write servo-thread
addf m5i20.0.misc-update servo-thread
addf m5i20.0.encoder-read servo-thread

loadrt and2 count=2
addf and2.0 servo-thread
addf and2.1 servo-thread

loadrt or2 count=5
addf or2.0 servo-thread
addf or2.1 servo-thread
addf or2.2 servo-thread
addf or2.3 servo-thread
addf or2.4 servo-thread

loadrt oneshot count=1
addf oneshot.0 servo-thread 

loadrt scale count=2
addf scale.0 servo-thread
addf scale.1 servo-thread

# ------------- 
# link estop status
newsig e_status bit
linksp e_status halui.estop.is-activated
linkps pyvcp.estop_led e_status

# ------------- 
# Motor power supply
net moto_ps pyvcp.chbutton1 pyvcp.chb_led1 parport.0.pin-04-out

# ------------- 
# laser power supply
net laser_ps pyvcp.chbutton2 pyvcp.chb_led2 parport.0.pin-03-out

# ------------- 
# chiller
net chiller_sw pyvcp.chbutton3 pyvcp.chb_led3 parport.0.pin-05-out

# ------------- 
# create ventilation

net program_state <= halui.program.is-running => and2.0.in0
net motion0 <= motion.digital-out-00 => and2.0.in1

net or3_1 and2.0.out or2.3.in0
net or3_2 pyvcp.chbutton4 or2.3.in1

net vent_sw or2.3.out parport.0.pin-06-out pyvcp.chb_led4

# ---------
net program_state => ard_pressure.program-is-running

# ------------- 
# create gas line

net program_state => and2.1.in0
net motion1 <= motion.digital-out-01 => and2.1.in1

net or4_1 and2.1.out or2.4.in0
net or4_2 pyvcp.chbutton5 or2.4.in1

net gasline_sw or2.4.out parport.0.pin-07-out pyvcp.chb_led5

# ------------- 
# air compressor
net comp_sw pyvcp.chbutton6 pyvcp.chb_led6 parport.0.pin-08-out 

# ------------- 
# User space component ard_pressure creates some output, attach
#  those outputs to the meters
setp scale.0.gain .083
net a3_1 scale.0.in ard_pressure.analog-in-00
net a3_2 scale.0.out => pyvcp.lo_pressure_m

setp scale.1.gain 2.5
net a4_1 scale.1.in ard_pressure.analog-in-01
net a4_2 scale.1.out => pyvcp.hi_pressure_m

# ------------- 
# Sliders to set power and a meter - the slider value is sent into 
#  the user space component laser_power
net LASER_POWER laser_power.power-in pyvcp.power-scale-f pyvcp.power-meter

# The pin power-in could also set by an M command as G-code
#  is executed in axis:
# sets LASER_POWER 95

# ------------
# Show IO from laser on LEDs
net VCPLED0 => pyvcp.data_led-1 m5i20.0.in-26-not
net VCPLED1 => pyvcp.data_led-2 m5i20.0.in-27
net VCPLED2 => pyvcp.data_led-3 m5i20.0.in-28
net VCPLED3 => pyvcp.data_led-4 m5i20.0.in-29
net VCPLED4 => pyvcp.data_led-5 m5i20.0.in-30
net VCPLED5 => pyvcp.data_led-6 m5i20.0.in-31-not

# ------------
# The user space component laser_power takes laser_power.power-in
#  and deconvolutes that data into PWM settings, e.g., it
#  sets laser_power.PWM01-out. Display these settings
#  and also attach them to the m5i20 board to run the laser.
net PWM01 laser_power.PWM01-out => pyvcp.pwmled-1 m5i20.0.out-08
net PWM02 laser_power.PWM02-out => pyvcp.pwmled-2 m5i20.0.out-09
net PWM04 laser_power.PWM04-out => pyvcp.pwmled-3 m5i20.0.out-10
net PWM08 laser_power.PWM08-out => pyvcp.pwmled-4 m5i20.0.out-11
net PWM16 laser_power.PWM16-out => pyvcp.pwmled-5 m5i20.0.out-12
net PWM32 laser_power.PWM32-out => pyvcp.pwmled-6 m5i20.0.out-13

# ------------- 
# momentary and latch switches that manually run laser
setp m5i20.0.out-15-invert FALSE

net l_input1 pyvcp.laser_state1 or2.0.in0
net l_input2 pyvcp.laser_chbutton or2.0.in1

net w1 pyvcp.pulse_duration => oneshot.0.width 
net os1 pyvcp.laser_state2 oneshot.0.in

net or1_0 oneshot.0.out or2.1.in0
net or1_1 or2.0.out     or2.1.in1

net or2_0 or2.1.out or2.2.in0
net or2_1 motion.digital-out-02 or2.2.in1

net laser_sw or2.2.out m5i20.0.out-15 
